{
  "address": "0x61EFdF8c52b49A347E69dEe7A62e0921A3545cF7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_author",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commission",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "LogMetadataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "allowThirdpartyExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorCommission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_result",
          "type": "uint256"
        }
      ],
      "name": "getExecutionPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerPayout",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "getMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerMargin",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSyntheticIdName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_author",
          "type": "address"
        }
      ],
      "name": "setAuthorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commission",
          "type": "uint256"
        }
      ],
      "name": "setAuthorCommission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_derivativeOwner",
          "type": "address"
        }
      ],
      "name": "thirdpartyExecutionAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "validateInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x41a78f726d01edb8e797230a8fbb2c8d2a9b1a23ca91fbf852e1c3a082e692a0",
  "receipt": {
    "to": null,
    "from": "0xd8166138Eda6dEFD2Bf2403d7637F41CE01C4BbE",
    "contractAddress": "0x61EFdF8c52b49A347E69dEe7A62e0921A3545cF7",
    "transactionIndex": 0,
    "gasUsed": "18201677",
    "logsBloom": "0x
    "blockHash": "0xe98313b8ef0a4c649d8d0eea361edf40937807159a0fedeb85356453b1930e47",
    "transactionHash": "0x41a78f726d01edb8e797230a8fbb2c8d2a9b1a23ca91fbf852e1c3a082e692a0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6174129,
        "transactionHash": "0x41a78f726d01edb8e797230a8fbb2c8d2a9b1a23ca91fbf852e1c3a082e692a0",
        "address": "0x61EFdF8c52b49A347E69dEe7A62e0921A3545cF7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe98313b8ef0a4c649d8d0eea361edf40937807159a0fedeb85356453b1930e47"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6174129,
        "transactionHash": "0x41a78f726d01edb8e797230a8fbb2c8d2a9b1a23ca91fbf852e1c3a082e692a0",
        "address": "0x61EFdF8c52b49A347E69dEe7A62e0921A3545cF7",
        "topics": [
          "0x0b11cbc9c1f60ccfdad79229add00f3dfa05137343e96ef525274af03c5d19d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000637b22617574686f72223a224f7069756d2e5465616d222c2274797065223a226f7074696f6e222c2273756274797065223a2263616c6c222c226465736372697074696f6e223a224f7074696f6e2043616c6c206c6f67696320636f6e7472616374227d0000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0xe98313b8ef0a4c649d8d0eea361edf40937807159a0fedeb85356453b1930e47"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6174129,
        "transactionHash": "0x41a78f726d01edb8e797230a8fbb2c8d2a9b1a23ca91fbf852e1c3a082e692a0",
        "address": "0x61EFdF8c52b49A347E69dEe7A62e0921A3545cF7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe98313b8ef0a4c649d8d0eea361edf40937807159a0fedeb85356453b1930e47"
      }
    ],
    "blockNumber": 6174129,
    "cumulativeGasUsed": "7482297",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd8166138Eda6dEFD2Bf2403d7637F41CE01C4BbE",
    "500"
  ],
  "numDeployments": 1,
  "solcInputHash": "57cfc55f7ca8ba67ec79f9c393af929f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"LogMetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"allowThirdpartyExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"getExecutionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"getMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerMargin\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSyntheticIdName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_author\",\"type\":\"address\"}],\"name\":\"setAuthorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setAuthorCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivativeOwner\",\"type\":\"address\"}],\"name\":\"thirdpartyExecutionAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"validateInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowThirdpartyExecution(bool)\":{\"params\":{\"_allow\":\"bool Flag for execution allowance\"}},\"getAuthorAddress()\":{\"returns\":{\"_0\":\"address syntheticId author address\"}},\"getAuthorCommission()\":{\"returns\":{\"_0\":\"uint256 syntheticId author commission\"}},\"getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative\",\"_result\":\"uint256 Data retrieved from oracleId on the maturity\"},\"returns\":{\"buyerPayout\":\"uint256 Payout in ratio for buyer (LONG position holder)\",\"sellerPayout\":\"uint256 Payout in ratio for seller (SHORT position holder)\"}},\"getMargin((uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative\"},\"returns\":{\"buyerMargin\":\"uint256 Margin needed from buyer (LONG position)\",\"sellerMargin\":\"uint256 Margin needed from seller (SHORT position)\"}},\"getSyntheticIdName()\":{\"returns\":{\"_0\":\"Returns the custom name of a derivative ticker which will be used as part of the name of its positions\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validateInput((uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative to validate\"},\"returns\":{\"_0\":\"Returns boolean whether ticker is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowThirdpartyExecution(bool)\":{\"notice\":\"Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf\"},\"getAuthorAddress()\":{\"notice\":\"Getter for syntheticId author address\"},\"getAuthorCommission()\":{\"notice\":\"Getter for syntheticId author commission\"},\"getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)\":{\"notice\":\"Calculates payout for derivative execution\"},\"getMargin((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Calculates margin required for derivative creation\"},\"setAuthorAddress(address)\":{\"notice\":\"GOVERNANCE \"},\"thirdpartyExecutionAllowed(address)\":{\"notice\":\"THIRDPARTY EXECUTION \"},\"validateInput((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Validates ticker\"}},\"notice\":\"Error codes: - S1 = CAN_NOT_BE_ZERO_ADDRESS\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/synthetics/options/OptionCallSyntheticId.sol\":\"OptionCallSyntheticId\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/synthetics/options/OptionCallSyntheticId.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"opium-protocol-v2/contracts/interfaces/IDerivativeLogic.sol\\\";\\n\\nimport \\\"../utils/ThirdPartyExecutionSyntheticId.sol\\\";\\n\\n/**\\n    Error codes:\\n    - S1 = CAN_NOT_BE_ZERO_ADDRESS\\n */\\ncontract OptionCallSyntheticId is IDerivativeLogic, ThirdPartyExecutionSyntheticId, Ownable {\\n    address private author;\\n    uint256 private commission;\\n\\n    uint256 public constant BASE = 1e18;\\n\\n    constructor(address _author, uint256 _commission) {\\n        /*\\n        {\\n            \\\"author\\\": \\\"Opium.Team\\\",\\n            \\\"type\\\": \\\"option\\\",\\n            \\\"subtype\\\": \\\"call\\\",\\n            \\\"description\\\": \\\"Option Call logic contract\\\"\\n        }\\n        */\\n        emit LogMetadataSet(\\\"{\\\\\\\"author\\\\\\\":\\\\\\\"Opium.Team\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"option\\\\\\\",\\\\\\\"subtype\\\\\\\":\\\\\\\"call\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Option Call logic contract\\\\\\\"}\\\");\\n\\n        author = _author;\\n        commission = _commission;\\n\\n        // Transfer contract's ownership to author on deployment\\n        transferOwnership(_author);\\n    }\\n\\n    // margin - reference value for option nominal\\n    // params[0] - strikePrice - denominated in E18\\n    // params[1] - collateralization\\n    // params[2] - fixedPremium - (optional)\\n    function validateInput(LibDerivative.Derivative calldata _derivative) external override pure returns (bool) {\\n        return (\\n            // Derivative\\n            _derivative.margin > 0 && // nominal > 0\\n            _derivative.params.length == 3 &&\\n\\n            _derivative.params[0] > 0 && // Strike price > 0\\n            _derivative.params[1] <= BASE && _derivative.params[1] > 0 // 100% >= Collateralization > 0\\n        );\\n    }\\n\\n    function getSyntheticIdName() external override pure returns (string memory) {\\n        return \\\"OPT-C\\\";\\n    }\\n\\n    function getMargin(LibDerivative.Derivative calldata _derivative) external override pure returns (uint256 buyerMargin, uint256 sellerMargin) {\\n        uint256 collateralization = _derivative.params[1];\\n        uint256 fixedPremium = _derivative.params[2];\\n        buyerMargin = fixedPremium;\\n\\n        uint256 nominal = _derivative.margin;\\n        sellerMargin = nominal * collateralization / BASE;\\n    }\\n\\n    function getExecutionPayout(LibDerivative.Derivative calldata _derivative, uint256 _result) external override pure returns (uint256 buyerPayout, uint256 sellerPayout) {\\n        uint256 strikePrice = _derivative.params[0];\\n        uint256 collateralization = _derivative.params[1];\\n        uint256 fixedPremium = _derivative.params[2];\\n        uint256 nominal = _derivative.margin;\\n        uint256 sellerMargin = nominal * collateralization / BASE;\\n\\n        // If result price is greater than strike price, buyer is being paid out\\n        if (_result > strikePrice) {\\n            // Buyer payout is calculated as nominal multiplied by underlying result price appreciation from strike price\\n            buyerPayout = nominal * (_result - strikePrice) / _result;\\n\\n            // If Buyer payout exceeds the initial seller margin, then it's being capped (limited) by it\\n            if (buyerPayout > sellerMargin) {\\n                buyerPayout = sellerMargin;\\n            }\\n\\n            // Seller payout is calculated as a reminder from seller margin and buyer payout\\n            sellerPayout = sellerMargin - buyerPayout;\\n        } else {\\n            // If result price is lower or equal to strike price, buyer is not being paid out\\n            buyerPayout = 0;\\n            \\n            // Seller receives its margin back as a payout\\n            sellerPayout = sellerMargin;\\n        }\\n\\n        // Seller payout is always increased by fixed premium if specified\\n        sellerPayout = sellerPayout + fixedPremium;\\n    }\\n\\n    /** COMMISSION */\\n    /// @notice Getter for syntheticId author address\\n    /// @return address syntheticId author address\\n    function getAuthorAddress() external override view returns (address) {\\n        return author;\\n    }\\n\\n    /// @notice Getter for syntheticId author commission\\n    /// @return uint256 syntheticId author commission\\n    function getAuthorCommission() external override view returns (uint256) {\\n        return commission;\\n    }\\n\\n    /** THIRDPARTY EXECUTION */\\n    function thirdpartyExecutionAllowed(address _derivativeOwner) external override view returns (bool) {\\n        return isThirdPartyExecutionAllowed[_derivativeOwner];\\n    }\\n\\n    function allowThirdpartyExecution(bool _allow) external override {\\n        _allowThirdpartyExecution(msg.sender, _allow);\\n    }\\n\\n    /** GOVERNANCE */\\n    function setAuthorAddress(address _author) external onlyOwner {\\n        require(_author != address(0), \\\"S1\\\");\\n        author = _author;\\n    }\\n\\n    function setAuthorCommission(uint256 _commission) external onlyOwner {\\n        commission = _commission;\\n    }\\n}\\n\",\"keccak256\":\"0xe933371b547da7f6219fe31609de536b3d7ebefb8b0d8939efc8267d5fb1d646\",\"license\":\"agpl-3.0\"},\"contracts/synthetics/utils/ThirdPartyExecutionSyntheticId.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ncontract ThirdPartyExecutionSyntheticId {\\n    // Mapping containing whether msg.sender allowed his positions to be executed by third party\\n    mapping (address => bool) internal isThirdPartyExecutionAllowed;\\n\\n    function _allowThirdpartyExecution(address _user, bool _allow) internal {\\n        isThirdPartyExecutionAllowed[_user] = _allow;\\n    }\\n}\\n\",\"keccak256\":\"0x25487346dd1eb764abaff33c76b06236902b74c61215902819207fb0949c830c\",\"license\":\"agpl-3.0\"},\"opium-protocol-v2/contracts/interfaces/IDerivativeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\nimport \\\"../libs/LibDerivative.sol\\\";\\n\\n/// @title Opium.Interface.IDerivativeLogic is an interface that every syntheticId should implement\\ninterface IDerivativeLogic {\\n    // Event with syntheticId metadata JSON string (for DIB.ONE derivative explorer)\\n    event LogMetadataSet(string metadata);\\n\\n    /// @notice Validates ticker\\n    /// @param _derivative Derivative Instance of derivative to validate\\n    /// @return Returns boolean whether ticker is valid\\n    function validateInput(LibDerivative.Derivative memory _derivative) external view returns (bool);\\n\\n    /// @return Returns the custom name of a derivative ticker which will be used as part of the name of its positions\\n    function getSyntheticIdName() external view returns (string memory);\\n\\n    /// @notice Calculates margin required for derivative creation\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @return buyerMargin uint256 Margin needed from buyer (LONG position)\\n    /// @return sellerMargin uint256 Margin needed from seller (SHORT position)\\n    function getMargin(LibDerivative.Derivative memory _derivative)\\n        external\\n        view\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n\\n    /// @notice Calculates payout for derivative execution\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @param _result uint256 Data retrieved from oracleId on the maturity\\n    /// @return buyerPayout uint256 Payout in ratio for buyer (LONG position holder)\\n    /// @return sellerPayout uint256 Payout in ratio for seller (SHORT position holder)\\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\\n        external\\n        view\\n        returns (uint256 buyerPayout, uint256 sellerPayout);\\n\\n    /// @notice Returns syntheticId author address for Opium commissions\\n    /// @return authorAddress address The address of syntheticId address\\n    function getAuthorAddress() external view returns (address authorAddress);\\n\\n    /// @notice Returns syntheticId author commission in base of COMMISSION_BASE\\n    /// @return commission uint256 Author commission\\n    function getAuthorCommission() external view returns (uint256 commission);\\n\\n    /// @notice Returns whether thirdparty could execute on derivative's owner's behalf\\n    /// @param _derivativeOwner address Derivative owner address\\n    /// @return Returns boolean whether _derivativeOwner allowed third party execution\\n    function thirdpartyExecutionAllowed(address _derivativeOwner) external view returns (bool);\\n\\n    /// @notice Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf\\n    /// @param _allow bool Flag for execution allowance\\n    function allowThirdpartyExecution(bool _allow) external;\\n}\\n\",\"keccak256\":\"0x5e1d999a6634d35d25faf8a75072fda36c348bac716428d854fcdcee78c69346\",\"license\":\"agpl-3.0\"},\"opium-protocol-v2/contracts/libs/LibDerivative.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n\\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(\\n            abi.encodePacked(\\n                _derivative.margin,\\n                _derivative.endTime,\\n                _derivative.params,\\n                _derivative.oracleId,\\n                _derivative.token,\\n                _derivative.syntheticId\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8dc20b755b97c78a16d4c51b55efb29b9224e6117c1c8703e1716fd15539f12c\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620017e2380380620017e283398181016040528101906200003791906200032b565b620000576200004b620000ef60201b60201c565b620000f760201b60201c565b7f0b11cbc9c1f60ccfdad79229add00f3dfa05137343e96ef525274af03c5d19d0604051620000869062000409565b60405180910390a181600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600381905550620000e782620001bd60201b60201c565b5050620005e8565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001cd620000ef60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001f3620002d360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000243906200042b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002bf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002b690620003e7565b60405180910390fd5b620002d081620000f760201b60201c565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000815190506200030e81620005b4565b92915050565b6000815190506200032581620005ce565b92915050565b600080604083850312156200034557620003446200049c565b5b60006200035585828601620002fd565b9250506020620003688582860162000314565b9150509250929050565b6000620003816026836200044d565b91506200038e82620004a1565b604082019050919050565b6000620003a86063836200044d565b9150620003b582620004f0565b608082019050919050565b6000620003cf6020836200044d565b9150620003dc826200058b565b602082019050919050565b60006020820190508181036000830152620004028162000372565b9050919050565b60006020820190508181036000830152620004248162000399565b9050919050565b600060208201905081810360008301526200044681620003c0565b9050919050565b600082825260208201905092915050565b60006200046b8262000472565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7b22617574686f72223a224f7069756d2e5465616d222c2274797065223a226f60008201527f7074696f6e222c2273756274797065223a2263616c6c222c226465736372697060208201527f74696f6e223a224f7074696f6e2043616c6c206c6f67696320636f6e7472616360408201527f74227d0000000000000000000000000000000000000000000000000000000000606082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b620005bf816200045e565b8114620005cb57600080fd5b50565b620005d98162000492565b8114620005e557600080fd5b50565b6111ea80620005f86000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063dd0060fd11610066578063dd0060fd14610226578063ec342ad014610257578063f22430e814610275578063f2fde38b146102a5576100ea565b80638da5cb5b146101ce578063a4300ee5146101ec578063d099b35f1461020a576100ea565b80633a6f60a9116100c85780633a6f60a9146101585780633a84543e146101885780633d6490b8146101a6578063715018a6146101c4576100ea565b80630433fe45146100ef5780630e49dee8146101205780631bacb5cf1461013c575b600080fd5b61010960048036038101906101049190610b66565b6102c1565b604051610117929190610dda565b60405180910390f35b61013a60048036038101906101359190610b39565b610353565b005b61015660048036038101906101519190610c0b565b610360565b005b610172600480360381019061016d9190610b66565b6103e6565b60405161017f9190610d22565b60405180910390f35b6101906104b7565b60405161019d9190610dbf565b60405180910390f35b6101ae6104c1565b6040516101bb9190610d3d565b60405180910390f35b6101cc6104fe565b005b6101d6610586565b6040516101e39190610d07565b60405180910390f35b6101f46105b0565b6040516102019190610d07565b60405180910390f35b610224600480360381019061021f9190610b0c565b6105da565b005b610240600480360381019061023b9190610baf565b61070a565b60405161024e929190610dda565b60405180910390f35b61025f61082d565b60405161026c9190610dbf565b60405180910390f35b61028f600480360381019061028a9190610b0c565b610839565b60405161029c9190610d22565b60405180910390f35b6102bf60048036038101906102ba9190610b0c565b61088e565b005b60008060008380604001906102d69190610e03565b60018181106102e8576102e7611070565b5b90506020020135905060008480604001906103039190610e03565b600281811061031557610314611070565b5b905060200201359050809350600085600001359050670de0b6b3a7640000838261033f9190610f09565b6103499190610ed8565b9350505050915091565b61035d3382610986565b50565b6103686109e0565b73ffffffffffffffffffffffffffffffffffffffff16610386610586565b73ffffffffffffffffffffffffffffffffffffffff16146103dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d390610d7f565b60405180910390fd5b8060038190555050565b600080826000013511801561040c575060038280604001906104089190610e03565b9050145b8015610440575060008280604001906104259190610e03565b600081811061043757610436611070565b5b90506020020135115b801561047c5750670de0b6b3a76400008280604001906104609190610e03565b600181811061047257610471611070565b5b9050602002013511155b80156104b0575060008280604001906104959190610e03565b60018181106104a7576104a6611070565b5b90506020020135115b9050919050565b6000600354905090565b60606040518060400160405280600581526020017f4f50542d43000000000000000000000000000000000000000000000000000000815250905090565b6105066109e0565b73ffffffffffffffffffffffffffffffffffffffff16610524610586565b73ffffffffffffffffffffffffffffffffffffffff161461057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610d7f565b60405180910390fd5b61058460006109e8565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105e26109e0565b73ffffffffffffffffffffffffffffffffffffffff16610600610586565b73ffffffffffffffffffffffffffffffffffffffff1614610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064d90610d7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd90610d9f565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600084806040019061071f9190610e03565b600081811061073157610730611070565b5b905060200201359050600085806040019061074c9190610e03565b600181811061075e5761075d611070565b5b90506020020135905060008680604001906107799190610e03565b600281811061078b5761078a611070565b5b9050602002013590506000876000013590506000670de0b6b3a764000084836107b49190610f09565b6107be9190610ed8565b90508488111561080b578785896107d59190610f63565b836107e09190610f09565b6107ea9190610ed8565b9650808711156107f8578096505b86816108049190610f63565b9550610813565b600096508095505b828661081f9190610e82565b955050505050509250929050565b670de0b6b3a764000081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6108966109e0565b73ffffffffffffffffffffffffffffffffffffffff166108b4610586565b73ffffffffffffffffffffffffffffffffffffffff161461090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190610d7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190610d5f565b60405180910390fd5b610983816109e8565b50565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610abd8161116f565b92915050565b600081359050610ad281611186565b92915050565b600060c08284031215610aee57610aed6110a4565b5b81905092915050565b600081359050610b068161119d565b92915050565b600060208284031215610b2257610b216110b8565b5b6000610b3084828501610aae565b91505092915050565b600060208284031215610b4f57610b4e6110b8565b5b6000610b5d84828501610ac3565b91505092915050565b600060208284031215610b7c57610b7b6110b8565b5b600082013567ffffffffffffffff811115610b9a57610b996110b3565b5b610ba684828501610ad8565b91505092915050565b60008060408385031215610bc657610bc56110b8565b5b600083013567ffffffffffffffff811115610be457610be36110b3565b5b610bf085828601610ad8565b9250506020610c0185828601610af7565b9150509250929050565b600060208284031215610c2157610c206110b8565b5b6000610c2f84828501610af7565b91505092915050565b610c4181610f97565b82525050565b610c5081610fa9565b82525050565b6000610c6182610e66565b610c6b8185610e71565b9350610c7b818560208601610fdf565b610c84816110bd565b840191505092915050565b6000610c9c602683610e71565b9150610ca7826110ce565b604082019050919050565b6000610cbf602083610e71565b9150610cca8261111d565b602082019050919050565b6000610ce2600283610e71565b9150610ced82611146565b602082019050919050565b610d0181610fd5565b82525050565b6000602082019050610d1c6000830184610c38565b92915050565b6000602082019050610d376000830184610c47565b92915050565b60006020820190508181036000830152610d578184610c56565b905092915050565b60006020820190508181036000830152610d7881610c8f565b9050919050565b60006020820190508181036000830152610d9881610cb2565b9050919050565b60006020820190508181036000830152610db881610cd5565b9050919050565b6000602082019050610dd46000830184610cf8565b92915050565b6000604082019050610def6000830185610cf8565b610dfc6020830184610cf8565b9392505050565b60008083356001602003843603038112610e2057610e1f6110a9565b5b80840192508235915067ffffffffffffffff821115610e4257610e4161109f565b5b602083019250602082023603831315610e5e57610e5d6110ae565b5b509250929050565b600081519050919050565b600082825260208201905092915050565b6000610e8d82610fd5565b9150610e9883610fd5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ecd57610ecc611012565b5b828201905092915050565b6000610ee382610fd5565b9150610eee83610fd5565b925082610efe57610efd611041565b5b828204905092915050565b6000610f1482610fd5565b9150610f1f83610fd5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f5857610f57611012565b5b828202905092915050565b6000610f6e82610fd5565b9150610f7983610fd5565b925082821015610f8c57610f8b611012565b5b828203905092915050565b6000610fa282610fb5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610ffd578082015181840152602081019050610fe2565b8381111561100c576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5331000000000000000000000000000000000000000000000000000000000000600082015250565b61117881610f97565b811461118357600080fd5b50565b61118f81610fa9565b811461119a57600080fd5b50565b6111a681610fd5565b81146111b157600080fd5b5056fea2646970667358221220e4c87f25f56e0bf8069f2a068f383b0eafd1e3e89d7eefbe35c387a03be61db564736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063dd0060fd11610066578063dd0060fd14610226578063ec342ad014610257578063f22430e814610275578063f2fde38b146102a5576100ea565b80638da5cb5b146101ce578063a4300ee5146101ec578063d099b35f1461020a576100ea565b80633a6f60a9116100c85780633a6f60a9146101585780633a84543e146101885780633d6490b8146101a6578063715018a6146101c4576100ea565b80630433fe45146100ef5780630e49dee8146101205780631bacb5cf1461013c575b600080fd5b61010960048036038101906101049190610b66565b6102c1565b604051610117929190610dda565b60405180910390f35b61013a60048036038101906101359190610b39565b610353565b005b61015660048036038101906101519190610c0b565b610360565b005b610172600480360381019061016d9190610b66565b6103e6565b60405161017f9190610d22565b60405180910390f35b6101906104b7565b60405161019d9190610dbf565b60405180910390f35b6101ae6104c1565b6040516101bb9190610d3d565b60405180910390f35b6101cc6104fe565b005b6101d6610586565b6040516101e39190610d07565b60405180910390f35b6101f46105b0565b6040516102019190610d07565b60405180910390f35b610224600480360381019061021f9190610b0c565b6105da565b005b610240600480360381019061023b9190610baf565b61070a565b60405161024e929190610dda565b60405180910390f35b61025f61082d565b60405161026c9190610dbf565b60405180910390f35b61028f600480360381019061028a9190610b0c565b610839565b60405161029c9190610d22565b60405180910390f35b6102bf60048036038101906102ba9190610b0c565b61088e565b005b60008060008380604001906102d69190610e03565b60018181106102e8576102e7611070565b5b90506020020135905060008480604001906103039190610e03565b600281811061031557610314611070565b5b905060200201359050809350600085600001359050670de0b6b3a7640000838261033f9190610f09565b6103499190610ed8565b9350505050915091565b61035d3382610986565b50565b6103686109e0565b73ffffffffffffffffffffffffffffffffffffffff16610386610586565b73ffffffffffffffffffffffffffffffffffffffff16146103dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d390610d7f565b60405180910390fd5b8060038190555050565b600080826000013511801561040c575060038280604001906104089190610e03565b9050145b8015610440575060008280604001906104259190610e03565b600081811061043757610436611070565b5b90506020020135115b801561047c5750670de0b6b3a76400008280604001906104609190610e03565b600181811061047257610471611070565b5b9050602002013511155b80156104b0575060008280604001906104959190610e03565b60018181106104a7576104a6611070565b5b90506020020135115b9050919050565b6000600354905090565b60606040518060400160405280600581526020017f4f50542d43000000000000000000000000000000000000000000000000000000815250905090565b6105066109e0565b73ffffffffffffffffffffffffffffffffffffffff16610524610586565b73ffffffffffffffffffffffffffffffffffffffff161461057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610d7f565b60405180910390fd5b61058460006109e8565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105e26109e0565b73ffffffffffffffffffffffffffffffffffffffff16610600610586565b73ffffffffffffffffffffffffffffffffffffffff1614610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064d90610d7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd90610d9f565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600084806040019061071f9190610e03565b600081811061073157610730611070565b5b905060200201359050600085806040019061074c9190610e03565b600181811061075e5761075d611070565b5b90506020020135905060008680604001906107799190610e03565b600281811061078b5761078a611070565b5b9050602002013590506000876000013590506000670de0b6b3a764000084836107b49190610f09565b6107be9190610ed8565b90508488111561080b578785896107d59190610f63565b836107e09190610f09565b6107ea9190610ed8565b9650808711156107f8578096505b86816108049190610f63565b9550610813565b600096508095505b828661081f9190610e82565b955050505050509250929050565b670de0b6b3a764000081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6108966109e0565b73ffffffffffffffffffffffffffffffffffffffff166108b4610586565b73ffffffffffffffffffffffffffffffffffffffff161461090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190610d7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190610d5f565b60405180910390fd5b610983816109e8565b50565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610abd8161116f565b92915050565b600081359050610ad281611186565b92915050565b600060c08284031215610aee57610aed6110a4565b5b81905092915050565b600081359050610b068161119d565b92915050565b600060208284031215610b2257610b216110b8565b5b6000610b3084828501610aae565b91505092915050565b600060208284031215610b4f57610b4e6110b8565b5b6000610b5d84828501610ac3565b91505092915050565b600060208284031215610b7c57610b7b6110b8565b5b600082013567ffffffffffffffff811115610b9a57610b996110b3565b5b610ba684828501610ad8565b91505092915050565b60008060408385031215610bc657610bc56110b8565b5b600083013567ffffffffffffffff811115610be457610be36110b3565b5b610bf085828601610ad8565b9250506020610c0185828601610af7565b9150509250929050565b600060208284031215610c2157610c206110b8565b5b6000610c2f84828501610af7565b91505092915050565b610c4181610f97565b82525050565b610c5081610fa9565b82525050565b6000610c6182610e66565b610c6b8185610e71565b9350610c7b818560208601610fdf565b610c84816110bd565b840191505092915050565b6000610c9c602683610e71565b9150610ca7826110ce565b604082019050919050565b6000610cbf602083610e71565b9150610cca8261111d565b602082019050919050565b6000610ce2600283610e71565b9150610ced82611146565b602082019050919050565b610d0181610fd5565b82525050565b6000602082019050610d1c6000830184610c38565b92915050565b6000602082019050610d376000830184610c47565b92915050565b60006020820190508181036000830152610d578184610c56565b905092915050565b60006020820190508181036000830152610d7881610c8f565b9050919050565b60006020820190508181036000830152610d9881610cb2565b9050919050565b60006020820190508181036000830152610db881610cd5565b9050919050565b6000602082019050610dd46000830184610cf8565b92915050565b6000604082019050610def6000830185610cf8565b610dfc6020830184610cf8565b9392505050565b60008083356001602003843603038112610e2057610e1f6110a9565b5b80840192508235915067ffffffffffffffff821115610e4257610e4161109f565b5b602083019250602082023603831315610e5e57610e5d6110ae565b5b509250929050565b600081519050919050565b600082825260208201905092915050565b6000610e8d82610fd5565b9150610e9883610fd5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ecd57610ecc611012565b5b828201905092915050565b6000610ee382610fd5565b9150610eee83610fd5565b925082610efe57610efd611041565b5b828204905092915050565b6000610f1482610fd5565b9150610f1f83610fd5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f5857610f57611012565b5b828202905092915050565b6000610f6e82610fd5565b9150610f7983610fd5565b925082821015610f8c57610f8b611012565b5b828203905092915050565b6000610fa282610fb5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610ffd578082015181840152602081019050610fe2565b8381111561100c576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5331000000000000000000000000000000000000000000000000000000000000600082015250565b61117881610f97565b811461118357600080fd5b50565b61118f81610fa9565b811461119a57600080fd5b50565b6111a681610fd5565b81146111b157600080fd5b5056fea2646970667358221220e4c87f25f56e0bf8069f2a068f383b0eafd1e3e89d7eefbe35c387a03be61db564736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowThirdpartyExecution(bool)": {
        "params": {
          "_allow": "bool Flag for execution allowance"
        }
      },
      "getAuthorAddress()": {
        "returns": {
          "_0": "address syntheticId author address"
        }
      },
      "getAuthorCommission()": {
        "returns": {
          "_0": "uint256 syntheticId author commission"
        }
      },
      "getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)": {
        "params": {
          "_derivative": "Derivative Instance of derivative",
          "_result": "uint256 Data retrieved from oracleId on the maturity"
        },
        "returns": {
          "buyerPayout": "uint256 Payout in ratio for buyer (LONG position holder)",
          "sellerPayout": "uint256 Payout in ratio for seller (SHORT position holder)"
        }
      },
      "getMargin((uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "Derivative Instance of derivative"
        },
        "returns": {
          "buyerMargin": "uint256 Margin needed from buyer (LONG position)",
          "sellerMargin": "uint256 Margin needed from seller (SHORT position)"
        }
      },
      "getSyntheticIdName()": {
        "returns": {
          "_0": "Returns the custom name of a derivative ticker which will be used as part of the name of its positions"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validateInput((uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "Derivative Instance of derivative to validate"
        },
        "returns": {
          "_0": "Returns boolean whether ticker is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowThirdpartyExecution(bool)": {
        "notice": "Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf"
      },
      "getAuthorAddress()": {
        "notice": "Getter for syntheticId author address"
      },
      "getAuthorCommission()": {
        "notice": "Getter for syntheticId author commission"
      },
      "getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)": {
        "notice": "Calculates payout for derivative execution"
      },
      "getMargin((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Calculates margin required for derivative creation"
      },
      "setAuthorAddress(address)": {
        "notice": "GOVERNANCE "
      },
      "thirdpartyExecutionAllowed(address)": {
        "notice": "THIRDPARTY EXECUTION "
      },
      "validateInput((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Validates ticker"
      }
    },
    "notice": "Error codes: - S1 = CAN_NOT_BE_ZERO_ADDRESS",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1130,
        "contract": "contracts/synthetics/options/OptionCallSyntheticId.sol:OptionCallSyntheticId",
        "label": "isThirdPartyExecutionAllowed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 53,
        "contract": "contracts/synthetics/options/OptionCallSyntheticId.sol:OptionCallSyntheticId",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 508,
        "contract": "contracts/synthetics/options/OptionCallSyntheticId.sol:OptionCallSyntheticId",
        "label": "author",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 510,
        "contract": "contracts/synthetics/options/OptionCallSyntheticId.sol:OptionCallSyntheticId",
        "label": "commission",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}